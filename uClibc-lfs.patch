--- uClibc-0.9.9/libc/sysdeps/linux/commonsyscalls.c.orig	Sat Feb  2 08:54:13 2002
+++ uClibc-0.9.9/libc/sysdeps/linux/common/syscalls.c	Tue Feb  5 09:38:30 2002
@@ -1093,10 +1093,8 @@
 
 	return ret ? (loff_t) ret : result;
 }
-#ifdef __UCLIBC_HAVE_LFS__
 weak_alias(llseek, lseek64);
 #endif
-#endif
 
 //#define __NR_getdents         141
 #ifdef L_getdents
@@ -1590,8 +1588,142 @@
 	return _fcntl64(fd, command, arg);
 }
 #endif
+#else /* !__UCLIBC_HAVE_LFS__ */
+
+/* Link 32 bit versions then. */
+
+#ifdef L_truncate64
+#include <unistd.h>
+int truncate64(const char *path, __off64_t length)
+{
+	return truncate(path, length);
+}
+#endif
+
+#ifdef L_ftruncate64
+#include <unistd.h>
+int ftruncate64(int fd, __off64_t length)
+{
+	return ftruncate(fd, length);
+}
+#endif
+
+#ifdef L___stat64
+#include <unistd.h>
+#define __USE_LARGEFILE64
+#define stat64 libc_stat64
+#include <sys/stat.h>
+#undef stat64
+int __xstat64(int version, const char * file_name, struct libc_stat64 * stat64)
+{
+	struct stat stat32;
+	int result = stat(file_name, &stat32);
+  
+	if (result == 0) { 
+		stat64->st_dev = stat32.st_dev;
+		stat64->st_ino = stat32.st_ino;
+		stat64->st_mode = stat32.st_mode;
+		stat64->st_nlink = stat32.st_nlink;
+		stat64->st_uid = stat32.st_uid;
+		stat64->st_gid = stat32.st_gid;
+		stat64->st_rdev = stat32.st_rdev;
+		stat64->st_size = stat32.st_size;
+		stat64->st_blksize = stat32.st_blksize;
+		stat64->st_blocks = stat32.st_blocks;
+		stat64->st_atime = stat32.st_atime;
+		stat64->st_mtime = stat32.st_mtime;
+		stat64->st_ctime = stat32.st_ctime;
+	}
+	
+	return result;
+}
+  
+int stat64(const char *file_name, struct libc_stat64 *buf)
+{
+	return(__xstat64(0, file_name, buf));
+}
 #endif
 
+#ifdef L___lstat64
+#include <unistd.h>
+#define __USE_LARGEFILE64
+#include <sys/stat.h>
+int __lxstat64(int version, const char * file_name, struct stat64 * stat64)
+{
+	struct stat stat32;
+	int result = lstat(file_name, &stat32);
+  
+	if (result == 0) { 
+		stat64->st_dev = stat32.st_dev;
+		stat64->st_ino = stat32.st_ino;
+		stat64->st_mode = stat32.st_mode;
+		stat64->st_nlink = stat32.st_nlink;
+		stat64->st_uid = stat32.st_uid;
+		stat64->st_gid = stat32.st_gid;
+		stat64->st_rdev = stat32.st_rdev;
+		stat64->st_size = stat32.st_size;
+		stat64->st_blksize = stat32.st_blksize;
+		stat64->st_blocks = stat32.st_blocks;
+		stat64->st_atime = stat32.st_atime;
+		stat64->st_mtime = stat32.st_mtime;
+		stat64->st_ctime = stat32.st_ctime;
+	}
+	
+	return result;
+}
+
+int lstat64(const char *file_name, struct stat64 *buf)
+{
+	return(__lxstat64(0, file_name, buf));
+}
+#endif
+
+#ifdef L___fstat64
+#include <unistd.h>
+#define __USE_LARGEFILE64
+#include <sys/stat.h>
+int __fxstat64(int version, int fd, struct stat64 * stat64)
+{
+	struct stat stat32;
+	int result = fstat(fd, &stat32);
+
+	if (result == 0) { 
+		stat64->st_dev = stat32.st_dev;
+		stat64->st_ino = stat32.st_ino;
+		stat64->st_mode = stat32.st_mode;
+		stat64->st_nlink = stat32.st_nlink;
+		stat64->st_uid = stat32.st_uid;
+		stat64->st_gid = stat32.st_gid;
+		stat64->st_rdev = stat32.st_rdev;
+		stat64->st_size = stat32.st_size;
+		stat64->st_blksize = stat32.st_blksize;
+		stat64->st_blocks = stat32.st_blocks;
+		stat64->st_atime = stat32.st_atime;
+		stat64->st_mtime = stat32.st_mtime;
+		stat64->st_ctime = stat32.st_ctime;
+	}
+	
+	return result;
+}
+
+int fstat64(int filedes, struct stat64 *buf)
+{
+	return(__fxstat64(0, filedes, buf));
+}
+#endif
+
+#ifdef L_getdents64
+#include <unistd.h>
+#include <dirent.h>
+extern int getdents __P ((unsigned int fd, struct dirent *dirp, unsigned int count));
+int getdents64(int fd, char *dirp, size_t count)
+{
+	return getdents(fd, dirp, count);
+}
+#endif
+
+#endif /* __UCLIBC_HAVE_LFS__ */
+
 //#define __NR_security		223	/* syscall for security modules */
 //#define __NR_gettid		224
 //#define __NR_readahead		225
