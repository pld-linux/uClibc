diff -ur uClibc-0.9.9/libc/misc/dirent/alphasort64.c uClibc-0.9.9-/libc/misc/dirent/alphasort64.c
--- uClibc-0.9.9/libc/misc/dirent/alphasort64.c	Wed Nov 14 11:09:46 2001
+++ uClibc-0.9.9-/libc/misc/dirent/alphasort64.c	Sat Mar 16 11:20:45 2002
@@ -1,5 +1,4 @@
 #include <features.h>
-#ifdef __UCLIBC_HAVE_LFS__
 #define _FILE_OFFSET_BITS   64
 #define __USE_LARGEFILE64
 #define __USE_FILE_OFFSET64
@@ -13,5 +12,3 @@
     return strcmp ((*(const struct dirent64 **) a)->d_name,
 	    (*(const struct dirent64 **) b)->d_name);
 }
-#endif /* __UCLIBC_HAVE_LFS__ */
-
diff -ur uClibc-0.9.9/libc/misc/dirent/readdir64.c uClibc-0.9.9-/libc/misc/dirent/readdir64.c
--- uClibc-0.9.9/libc/misc/dirent/readdir64.c	Wed Nov 14 11:09:46 2001
+++ uClibc-0.9.9-/libc/misc/dirent/readdir64.c	Sat Mar 16 11:19:48 2002
@@ -1,5 +1,4 @@
 #include <features.h>
-#ifdef __UCLIBC_HAVE_LFS__
 #define _FILE_OFFSET_BITS   64
 #define __USE_LARGEFILE64
 #define __USE_FILE_OFFSET64
@@ -63,5 +62,3 @@
 
 	return de;
 }
-
-#endif /* __UCLIBC_HAVE_LFS__ */
diff -ur uClibc-0.9.9/libc/misc/dirent/scandir64.c uClibc-0.9.9-/libc/misc/dirent/scandir64.c
--- uClibc-0.9.9/libc/misc/dirent/scandir64.c	Tue Jan  8 09:00:17 2002
+++ uClibc-0.9.9-/libc/misc/dirent/scandir64.c	Sat Mar 16 11:19:34 2002
@@ -24,7 +24,6 @@
 */
 
 #include <features.h>
-#ifdef __UCLIBC_HAVE_LFS__
 #define _FILE_OFFSET_BITS   64
 #define __USE_LARGEFILE64
 #define __USE_FILE_OFFSET64
@@ -90,5 +89,3 @@
 
     return pos;
 }
-#endif /* __UCLIBC_HAVE_LFS__ */
-
diff -ur uClibc-0.9.9/libc/stdio/stdio.c uClibc-0.9.9-/libc/stdio/stdio.c
--- uClibc-0.9.9/libc/stdio/stdio.c	Wed Nov 21 14:44:43 2001
+++ uClibc-0.9.9-/libc/stdio/stdio.c	Sat Mar 16 10:49:13 2002
@@ -1097,7 +1097,6 @@
 #endif
 
 #ifdef L_fopen64
-#ifdef __UCLIBC_HAVE_LFS__
 #ifndef O_LARGEFILE
 #define O_LARGEFILE	0100000
 #endif
@@ -1106,6 +1105,5 @@
 {
 	return __fopen(filename, -1, NULL, mode, O_LARGEFILE);
 }
-#endif /* __UCLIBC_HAVE_LFS__ */
 #endif
 
diff -ur uClibc-0.9.9/libc/stdio/tmpfile.c uClibc-0.9.9-/libc/stdio/tmpfile.c
--- uClibc-0.9.9/libc/stdio/tmpfile.c	Sun Jan  6 09:13:00 2002
+++ uClibc-0.9.9-/libc/stdio/tmpfile.c	Sat Mar 16 11:18:29 2002
@@ -49,6 +49,4 @@
 
     return f;
 }
-#ifdef __UCLIBC_HAVE_LFS__
 weak_alias(tmpfile, tmpfile64);
-#endif
diff -ur uClibc-0.9.9/libc/sysdeps/linux/common/open64.c uClibc-0.9.9-/libc/sysdeps/linux/common/open64.c
--- uClibc-0.9.9/libc/sysdeps/linux/common/open64.c	Wed Oct 17 01:10:28 2001
+++ uClibc-0.9.9-/libc/sysdeps/linux/common/open64.c	Sat Mar 16 10:49:13 2002
@@ -25,8 +25,6 @@
 #define O_LARGEFILE	0100000
 #endif
 
-#ifdef __UCLIBC_HAVE_LFS__
-
 /* Open FILE with access OFLAG.  If OFLAG includes O_CREAT,
    a third argument is the file protection.  */
 int open64 (const char *file, int oflag, ...)
@@ -43,6 +41,3 @@
 
   return open(file, oflag | O_LARGEFILE, mode);
 }
-
-#endif /* __UCLIBC_HAVE_LFS__ */
-
diff -ur uClibc-0.9.9/libc/sysdeps/linux/common/syscalls.c uClibc-0.9.9-/libc/sysdeps/linux/common/syscalls.c
--- uClibc-0.9.9/libc/sysdeps/linux/common/syscalls.c	Sat Feb  2 07:54:13 2002
+++ uClibc-0.9.9-/libc/sysdeps/linux/common/syscalls.c	Sat Mar 16 11:07:51 2002
@@ -1093,10 +1093,8 @@
 
 	return ret ? (loff_t) ret : result;
 }
-#ifdef __UCLIBC_HAVE_LFS__
 weak_alias(llseek, lseek64);
 #endif
-#endif
 
 //#define __NR_getdents         141
 #ifdef L_getdents
@@ -1590,8 +1588,192 @@
 	return _fcntl64(fd, command, arg);
 }
 #endif
+#else /* !__UCLIBC_HAVE_LFS__ */
+
+/* Link 32 bit versions then. */
+
+#ifdef L_truncate64
+#include <unistd.h>
+int truncate64(const char *path, __off64_t length)
+{
+	return truncate(path, length);
+}
+#endif
+
+#ifdef L_ftruncate64
+#include <unistd.h>
+int ftruncate64(int fd, __off64_t length)
+{
+	return ftruncate(fd, length);
+}
+#endif
+
+#ifdef L___stat64
+#include <unistd.h>
+#define __USE_LARGEFILE64
+#define stat64 libc_stat64
+#include <sys/stat.h>
+#undef stat64
+int __xstat64(int version, const char * file_name, struct libc_stat64 * stat64)
+{
+	struct stat stat32;
+	int result = stat(file_name, &stat32);
+  
+	if (result == 0) { 
+		stat64->st_dev = stat32.st_dev;
+		stat64->st_ino = stat32.st_ino;
+		stat64->st_mode = stat32.st_mode;
+		stat64->st_nlink = stat32.st_nlink;
+		stat64->st_uid = stat32.st_uid;
+		stat64->st_gid = stat32.st_gid;
+		stat64->st_rdev = stat32.st_rdev;
+		stat64->st_size = stat32.st_size;
+		stat64->st_blksize = stat32.st_blksize;
+		stat64->st_blocks = stat32.st_blocks;
+		stat64->st_atime = stat32.st_atime;
+		stat64->st_mtime = stat32.st_mtime;
+		stat64->st_ctime = stat32.st_ctime;
+	}
+	
+	return result;
+}
+  
+int stat64(const char *file_name, struct libc_stat64 *buf)
+{
+	return(__xstat64(0, file_name, buf));
+}
+#endif
+
+#ifdef L___lstat64
+#include <unistd.h>
+#define __USE_LARGEFILE64
+#include <sys/stat.h>
+int __lxstat64(int version, const char * file_name, struct stat64 * stat64)
+{
+	struct stat stat32;
+	int result = lstat(file_name, &stat32);
+  
+	if (result == 0) { 
+		stat64->st_dev = stat32.st_dev;
+		stat64->st_ino = stat32.st_ino;
+		stat64->st_mode = stat32.st_mode;
+		stat64->st_nlink = stat32.st_nlink;
+		stat64->st_uid = stat32.st_uid;
+		stat64->st_gid = stat32.st_gid;
+		stat64->st_rdev = stat32.st_rdev;
+		stat64->st_size = stat32.st_size;
+		stat64->st_blksize = stat32.st_blksize;
+		stat64->st_blocks = stat32.st_blocks;
+		stat64->st_atime = stat32.st_atime;
+		stat64->st_mtime = stat32.st_mtime;
+		stat64->st_ctime = stat32.st_ctime;
+	}
+	
+	return result;
+}
+
+int lstat64(const char *file_name, struct stat64 *buf)
+{
+	return(__lxstat64(0, file_name, buf));
+}
+#endif
+
+#ifdef L___fstat64
+#include <unistd.h>
+#define __USE_LARGEFILE64
+#include <sys/stat.h>
+int __fxstat64(int version, int fd, struct stat64 * stat64)
+{
+	struct stat stat32;
+	int result = fstat(fd, &stat32);
+
+	if (result == 0) { 
+		stat64->st_dev = stat32.st_dev;
+		stat64->st_ino = stat32.st_ino;
+		stat64->st_mode = stat32.st_mode;
+		stat64->st_nlink = stat32.st_nlink;
+		stat64->st_uid = stat32.st_uid;
+		stat64->st_gid = stat32.st_gid;
+		stat64->st_rdev = stat32.st_rdev;
+		stat64->st_size = stat32.st_size;
+		stat64->st_blksize = stat32.st_blksize;
+		stat64->st_blocks = stat32.st_blocks;
+		stat64->st_atime = stat32.st_atime;
+		stat64->st_mtime = stat32.st_mtime;
+		stat64->st_ctime = stat32.st_ctime;
+	}
+	
+	return result;
+}
+
+int fstat64(int filedes, struct stat64 *buf)
+{
+	return(__fxstat64(0, filedes, buf));
+}
+#endif
+
+#ifdef L_getdents64
+#include <unistd.h>
+#include <dirent.h>
+extern int getdents __P ((unsigned int fd, struct dirent *dirp, unsigned int count));
+int getdents64(int fd, char *dirp, size_t count)
+{
+	return getdents(fd, dirp, count);
+}
+#endif
+
+#ifdef L__fcntl64
+#include <stdarg.h>
+#define _FCNTL_H
+#define __USE_LARGEFILE64
+#include <bits/fcntl.h>
+extern int fcntl(int fd, int cmd, ...);
+
+int fcntl64(int fd, int command, ...)
+{
+	long arg;
+	va_list list;
+
+	va_start(list, command);
+	arg = va_arg(list, long);
+	va_end(list);
+
+	if (command == F_GETLK64) {
+		struct flock fl;
+		struct flock64 *fl64;
+		int r;
+
+		r = fcntl(fd, F_GETLK, &fl);
+		
+		if (r >= 0) {
+			fl64 = (void*)arg;
+			fl64->l_type = fl.l_type;
+			fl64->l_whence = fl.l_whence;
+			fl64->l_start = fl.l_start;
+			fl64->l_len = fl.l_len;
+			fl64->l_pid = fl.l_pid;
+		}
+
+		return r;
+	} else if (command == F_SETLKW64 || command == F_SETLK64) {
+		struct flock fl;
+		struct flock64 *fl64;
+
+		fl64 = (void*)arg;
+		fl.l_type = fl64->l_type;
+		fl.l_whence = fl64->l_whence;
+		fl.l_start = fl64->l_start;
+		fl.l_len = fl64->l_len;
+		fl.l_pid = fl64->l_pid;
+		
+		return fcntl(fd, command == F_SETLKW64 ? F_SETLKW : F_SETLK, &fl);
+	} else
+		return fcntl(fd, command, arg);
+}
 #endif
 
+#endif /* __UCLIBC_HAVE_LFS__ */
+
 //#define __NR_security		223	/* syscall for security modules */
 //#define __NR_gettid		224
 //#define __NR_readahead		225
